// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chaincode.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ChaincodeID;
@class ChaincodeInput;
@class ChaincodeSpec;
@class GPBTimestamp;
@class SenderSpec;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ConfidentialityLevel

/** Confidentiality Levels */
typedef GPB_ENUM(ConfidentialityLevel) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ConfidentialityLevel_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ConfidentialityLevel_Public = 0,
  ConfidentialityLevel_Confidential = 1,
};

GPBEnumDescriptor *ConfidentialityLevel_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ConfidentialityLevel_IsValidValue(int32_t value);

#pragma mark - Enum ChaincodeSpec_Type

typedef GPB_ENUM(ChaincodeSpec_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ChaincodeSpec_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ChaincodeSpec_Type_Undefined = 0,
  ChaincodeSpec_Type_Golang = 1,
  ChaincodeSpec_Type_Node = 2,
  ChaincodeSpec_Type_Car = 3,
  ChaincodeSpec_Type_Java = 4,
};

GPBEnumDescriptor *ChaincodeSpec_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ChaincodeSpec_Type_IsValidValue(int32_t value);

#pragma mark - Enum ChaincodeDeploymentSpec_ExecutionEnvironment

typedef GPB_ENUM(ChaincodeDeploymentSpec_ExecutionEnvironment) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ChaincodeDeploymentSpec_ExecutionEnvironment_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ChaincodeDeploymentSpec_ExecutionEnvironment_Docker = 0,
  ChaincodeDeploymentSpec_ExecutionEnvironment_System = 1,
};

GPBEnumDescriptor *ChaincodeDeploymentSpec_ExecutionEnvironment_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ChaincodeDeploymentSpec_ExecutionEnvironment_IsValidValue(int32_t value);

#pragma mark - ChaincodeRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ChaincodeRoot : GPBRootObject
@end

#pragma mark - ChaincodeID

typedef GPB_ENUM(ChaincodeID_FieldNumber) {
  ChaincodeID_FieldNumber_Path = 1,
  ChaincodeID_FieldNumber_Name = 2,
  ChaincodeID_FieldNumber_Version = 3,
};

/**
 * ChaincodeID contains the path as specified by the deploy transaction
 * that created it as well as the hashCode that is generated by the
 * system for the path. From the user level (ie, CLI, REST API and so on)
 * deploy transaction is expected to provide the path and other requests
 * are expected to provide the hashCode. The other value will be ignored.
 * Internally, the structure could contain both values. For instance, the
 * hashCode will be set when first generated using the path
 **/
@interface ChaincodeID : GPBMessage

/** deploy transaction will use the path */
@property(nonatomic, readwrite, copy, null_resettable) NSString *path;

/**
 * all other requests will use the name (really a hashcode) generated by
 * the deploy transaction
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** user friendly version name for the chaincode */
@property(nonatomic, readwrite, copy, null_resettable) NSString *version;

@end

#pragma mark - ChaincodeInput

typedef GPB_ENUM(ChaincodeInput_FieldNumber) {
  ChaincodeInput_FieldNumber_ArgsArray = 1,
};

/**
 * Carries the chaincode function and its arguments.
 * UnmarshalJSON in transaction.go converts the string-based REST/JSON input to
 * the []byte-based current ChaincodeInput structure.
 **/
@interface ChaincodeInput : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *argsArray;
/** The number of items in @c argsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger argsArray_Count;

@end

#pragma mark - ChaincodeSpec

typedef GPB_ENUM(ChaincodeSpec_FieldNumber) {
  ChaincodeSpec_FieldNumber_Type = 1,
  ChaincodeSpec_FieldNumber_ChaincodeId = 2,
  ChaincodeSpec_FieldNumber_Input = 3,
  ChaincodeSpec_FieldNumber_Timeout = 4,
};

/**
 * Carries the chaincode specification. This is the actual metadata required for
 * defining a chaincode.
 **/
@interface ChaincodeSpec : GPBMessage

@property(nonatomic, readwrite) ChaincodeSpec_Type type;

@property(nonatomic, readwrite, strong, null_resettable) ChaincodeID *chaincodeId;
/** Test to see if @c chaincodeId has been set. */
@property(nonatomic, readwrite) BOOL hasChaincodeId;

@property(nonatomic, readwrite, strong, null_resettable) ChaincodeInput *input;
/** Test to see if @c input has been set. */
@property(nonatomic, readwrite) BOOL hasInput;

@property(nonatomic, readwrite) int32_t timeout;

@end

/**
 * Fetches the raw value of a @c ChaincodeSpec's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ChaincodeSpec_Type_RawValue(ChaincodeSpec *message);
/**
 * Sets the raw value of an @c ChaincodeSpec's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetChaincodeSpec_Type_RawValue(ChaincodeSpec *message, int32_t value);

#pragma mark - SenderSpec

typedef GPB_ENUM(SenderSpec_FieldNumber) {
  SenderSpec_FieldNumber_Sender = 1,
  SenderSpec_FieldNumber_Counter = 2,
  SenderSpec_FieldNumber_InkLimit = 3,
  SenderSpec_FieldNumber_Msg = 4,
};

@interface SenderSpec : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *sender;

@property(nonatomic, readwrite) uint64_t counter;

@property(nonatomic, readwrite, copy, null_resettable) NSData *inkLimit;

@property(nonatomic, readwrite, copy, null_resettable) NSData *msg;

@end

#pragma mark - SignContent

typedef GPB_ENUM(SignContent_FieldNumber) {
  SignContent_FieldNumber_ChaincodeSpec = 1,
  SignContent_FieldNumber_IdGenerationAlg = 2,
  SignContent_FieldNumber_SenderSpec = 3,
};

@interface SignContent : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ChaincodeSpec *chaincodeSpec;
/** Test to see if @c chaincodeSpec has been set. */
@property(nonatomic, readwrite) BOOL hasChaincodeSpec;

@property(nonatomic, readwrite, copy, null_resettable) NSString *idGenerationAlg;

@property(nonatomic, readwrite, strong, null_resettable) SenderSpec *senderSpec;
/** Test to see if @c senderSpec has been set. */
@property(nonatomic, readwrite) BOOL hasSenderSpec;

@end

#pragma mark - ChaincodeDeploymentSpec

typedef GPB_ENUM(ChaincodeDeploymentSpec_FieldNumber) {
  ChaincodeDeploymentSpec_FieldNumber_ChaincodeSpec = 1,
  ChaincodeDeploymentSpec_FieldNumber_EffectiveDate = 2,
  ChaincodeDeploymentSpec_FieldNumber_CodePackage = 3,
  ChaincodeDeploymentSpec_FieldNumber_ExecEnv = 4,
};

/**
 * Specify the deployment of a chaincode.
 * TODO: Define `codePackage`.
 **/
@interface ChaincodeDeploymentSpec : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ChaincodeSpec *chaincodeSpec;
/** Test to see if @c chaincodeSpec has been set. */
@property(nonatomic, readwrite) BOOL hasChaincodeSpec;

/** Controls when the chaincode becomes executable. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *effectiveDate;
/** Test to see if @c effectiveDate has been set. */
@property(nonatomic, readwrite) BOOL hasEffectiveDate;

@property(nonatomic, readwrite, copy, null_resettable) NSData *codePackage;

@property(nonatomic, readwrite) ChaincodeDeploymentSpec_ExecutionEnvironment execEnv;

@end

/**
 * Fetches the raw value of a @c ChaincodeDeploymentSpec's @c execEnv property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ChaincodeDeploymentSpec_ExecEnv_RawValue(ChaincodeDeploymentSpec *message);
/**
 * Sets the raw value of an @c ChaincodeDeploymentSpec's @c execEnv property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetChaincodeDeploymentSpec_ExecEnv_RawValue(ChaincodeDeploymentSpec *message, int32_t value);

#pragma mark - ChaincodeInvocationSpec

typedef GPB_ENUM(ChaincodeInvocationSpec_FieldNumber) {
  ChaincodeInvocationSpec_FieldNumber_ChaincodeSpec = 1,
  ChaincodeInvocationSpec_FieldNumber_IdGenerationAlg = 2,
  ChaincodeInvocationSpec_FieldNumber_SenderSpec = 3,
  ChaincodeInvocationSpec_FieldNumber_Sig = 4,
};

/**
 * Carries the chaincode function and its arguments.
 **/
@interface ChaincodeInvocationSpec : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ChaincodeSpec *chaincodeSpec;
/** Test to see if @c chaincodeSpec has been set. */
@property(nonatomic, readwrite) BOOL hasChaincodeSpec;

/**
 * This field can contain a user-specified ID generation algorithm
 * If supplied, this will be used to generate a ID
 * If not supplied (left empty), sha256base64 will be used
 * The algorithm consists of two parts:
 *  1, a hash function
 *  2, a decoding used to decode user (string) input to bytes
 * Currently, SHA256 with BASE64 is supported (e.g. idGenerationAlg='sha256base64')
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *idGenerationAlg;

@property(nonatomic, readwrite, strong, null_resettable) SenderSpec *senderSpec;
/** Test to see if @c senderSpec has been set. */
@property(nonatomic, readwrite) BOOL hasSenderSpec;

@property(nonatomic, readwrite, copy, null_resettable) NSData *sig;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
